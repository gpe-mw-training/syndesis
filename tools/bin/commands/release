#!/bin/bash

# Maven modules which create Docker images
IMAGE_MODULES="ui server meta s2i"

release::description() {
    cat - <<EOT
Perform a release

This command performs a release but does *no* automated rollback when something fails.
Please refer to the manual at https://docs.syndesis.io for more details and what needs
to be cleaned up in case of a failure.
EOT
}

release::usage() {
    cat - <<EOT
-n  --dry-run                 Dry run, which performs the whole build but does no tagging, artefact
                              upload or pushing Docker images
    --release-version <ver>   Version to release (e.g. "1.2.1"). This is a mandatory argument.
    --dev-version <version>   Next development version. If not given, set to "<major>.<minor>-SNAPSHOT"
                              as calculated from --release-version (e.g. "1.2-SNAPSHOT")
    --settings <file>         Path to a custom settings.xml to use for the release.
                              This file must contain all the credentials to be used for Sonatype.
                              By default ~/.m2/settings.xml is used.
    --local-maven-repo <dir>  Local dir for holding the local Maven repo cache. If not given, then a new
                              temporary directory will be used (and removed after the release)
    --docker-user <user>      Docker user for Docker Hub
    --docker-password <pwd>   Docker password for Docker Hub
    --product-templates       Create templates for the productised version only and tag
    --no-git-push             Don't push the release tag (and symbolic major.minor tag) at the end
    --git-remote              Name of the git remote to push to. If not given, its trying to be pushed
                              to the git remote to which the currenlty checked out branch is attached to.
                              Works only when on a branch, not when checked out directly.
    --log <log-file>          Write full log to <log-file>, only print progress to screen
EOT
}

release::run() {
    source "$(basedir)/commands/util/maven_funcs"

    # Main application directory
    local topdir=$(appdir ".")

    # Validate release versions
    local release_version=$(readopt --release-version)
    if [ -z "${release_version}" ]; then
        echo "Please specify --release-version"
        exit 1
    fi

    # Get the Syndesis minor version
    local syndesis_tag=$(extract_minor_version $release_version)
    check_error $syndesis_tag

    # Generate product templates only if desired
    if [ $(hasflag --product-templates) ]; then
        do_product_templates $topdir $syndesis_tag "fuse-ignite"
        exit 0
    fi

    # Write to logfile if requestes
    if [ $(readopt --log) ]; then
        local logfile=$(readopt --log)
        touch $logfile
        tail -f $logfile > >(grep ^====) &
        local tail_pid=$!
        trap "kill $tail_pid" EXIT

        exec >>$logfile 2>&1
        sleep 1
    fi

    # Verify that there are no modified file in git repo
    check_git_clean "$topdir"

    # Temporary local repository to guarantee a clean build
    local local_maven_repo=$(readopt --local-maven-repo)
    if [ -z "$local_maven_repo" ]; then
        local_maven_repo=$(mktemp -d 2>/dev/null || mktemp -d -t 'maven_repo')
        trap "echo 'Removing temp maven repo $local_maven_repo' && rm -rf $local_maven_repo" "EXIT"
    fi

    # Calculate common maven options
    local maven_opts="$(extract_maven_opts $local_maven_repo)"

    # Set pom.xml version to the given release_version
    update_pom_versions "$topdir" "$release_version" "$maven_opts"

    # Make a clean install
    mvn_clean_install "$topdir" "$maven_opts"

    # Create templates for the full syndesis version
    generate_templates "$topdir" "$release_version"

    # Stage artefacts to Sonatype
    stage_artefacts "$topdir" "$maven_opts"

    # Build all Docker Images
    docker_login
    create_docker_images "$topdir" "$maven_opts"

    # For a test run, we are done
    if [ $(hasflag --dry-run -n) ]; then
        drop_staging_repo "$topdir" "$maven_opts"

        echo "==== Dry run finished, nothing has been committed"
        echo "==== Use 'git reset --hard' to cleanup"
        exit 0
    fi

    # ========================================================================
    # Commit, tag, release, push
    # --------------------------

    # Pushing to Docker Hub
    docker_push "$release_version" "$syndesis_tag"

    # Release staging repo
    release_staging_repo "$topdir" "$maven_opts"

    # Git Commit all changed files
    git_commit_files "$topdir" "$release_version"

    # Tag the release version
    echo "==== Tagging version $release_version"
    git tag -f "$release_version"

    # Create template versions for the minor tags (without patchlevels)
    create_templates_for_minor_version "$topdir" "$syndesis_tag"

    # Push everything (if configured)
    git_push "$topdir" "$release_version" "$syndesis_tag"
}

create_templates_for_minor_version() {
    local topdir=$1
    local syndesis_tag=$2

    generate_templates $topdir $syndesis_tag

    echo "==== Git commit for templates $syndesis_tag"
    cd $topdir
    git_commit ^install/ "Update OpenShift templates for Syndesis $syndesis_tag"

    echo "==== Git tag $syndesis_tag"
    git tag -f $syndesis_tag
}

# ===================================================================================================
# Prep actions:

check_git_clean() {
    local topdir=$1

    cd $topdir
    echo "==== Checking for clean Git Repo"
    set +e
    git diff-index --quiet HEAD --
    local git_uncommitted=$?
    set -e
    if [ $git_uncommitted != 0 ]; then
       echo "Untracked or changed files exist. Please run release on a clean repo"
       git status
       exit 1
    fi
}

update_pom_versions() {
    local topdir="$1"
    local version="$2"
    local maven_opts="$3"

    cd $topdir/app
    echo "==== Updating pom.xml versions to $version"
    ./mvnw ${maven_opts} versions:set -DnewVersion=$version -DprocessAllModules=true -DgenerateBackupPoms=false
}

mvn_clean_install() {
    local topdir="$1"
    local maven_opts="$2"

    echo "==== Running 'mvn clean install'"
    cd $topdir/app
    ./mvnw ${maven_opts} clean install -Pflash
}

generate_templates() {
    local dir="$1/install"
    local syndesis_tag="$2"

    echo "==== Creating templates for $syndesis_tag"
    cd $dir/generator
    sh run.sh --syndesis-tag="$syndesis_tag"
}

stage_artefacts() {
    local topdir="$1"
    local maven_opts="$2"

    echo "==== Staging Maven artefacts to Sonatype"
    cd $topdir/app
    ./mvnw ${maven_opts} -Prelease clean deploy -DstagingDescription="Staging Syndesis for $(readopt --release-version)"
}

docker_login() {
    if [ -n "$(readopt --docker-user)" ] && [ -n "$(readopt --docker-password)" ]; then
        echo "==== Login to Docker Hub"
        docker login -u "$(readopt --docker-user)" -p "$(readopt --docker-password)"
        trap "docker logout" "EXIT"
    fi
}

create_docker_images() {
    local topdir=$1
    local maven_opts="$2"

    echo "==== Creating Docker images"
    cd $topdir/app
    for module in $IMAGE_MODULES; do
        # -Pimage binds to fabric8:build
        ./mvnw ${maven_opts} -Prelease,image,flash -Dfabric8.mode=kubernetes -f $module package
    done
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Commit, push, release actions

docker_push() {
    local release_version=$1
    local syndesis_tag=$2

    echo "==== Pushing to Docker Hub"
    for module in $IMAGE_MODULES; do
        local image="syndesis/syndesis-$module"
        docker tag "$image:$release_version" "$image:$syndesis_tag"
        docker push "$image:$release_version"
        docker push "$image:$syndesis_tag"
    done
}

release_staging_repo() {
    local topdir="$1"
    local maven_opts="$2"

    echo "==== Releasing Sonatype staging repo"
    cd $topdir/app
    ./mvnw ${maven_opts} -Prelease nexus-staging:release -DstagingDescription="Releasing $(readopt --release-version)"
}

git_commit_files() {
    local dir=$1
    local version=$2

    echo "==== Committing files to local git"
    cd $dir
    git_commit pom.xml "Update pom.xmls to $version"
    git_commit ^app/connector/ "Update generated connector files"
    git_commit ^install/ "Update OpenShift templates for Syndesis $version"
}

git_push() {
    local topdir=${1:-}
    local release_version=${2:-}
    local syndesis_tag=${3:-}

    cd $topdir

    if [ ! $(hasflag --no-git-push) ] && [ ! $(hasflag --dry-run -n) ]; then
        local remote=$(readopt --git-remote)
        if [ -z "${remote}" ]; then
            # Push to the remote attached to the local checkout branch
            remote=$(git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD) | sed -e 's/\([^\/]*\)\/.*/\1/')
            if [ -z "${remote}" ]; then
              echo "ERROR: Cannot find remote repository to git push to"
              exit 1
            fi
        fi

        echo "==== Pushing to GitHub"
        if [ -n "$release_version" ]; then
            echo "* Pushing $release_version"
            git push -u $remote $release_version
        fi
        if [ -n "$syndesis_tag" ]; then
            echo "* Pushing symbolic tag $syndesis_tag"
            git push -f -u $remote $syndesis_tag
        fi
    fi
}

# =======================================================================
# Side actions

do_product_templates() {
  local topdir=$1
  local syndesis_tag=$2
  local tag_prefix=${4:-fuse-ignite}

  cd $topdir/install/generator

  echo "==== Creating product templates for $syndesis_tag"
  sh run.sh --product --syndesis-tag="$syndesis_tag"

  echo "==== Committing"
  cd $topdir
  git_commit ^install/ "Update OpenShift templates for Syndesis $syndesis_tag"

  echo "=== Tagging"
  git tag -f "${tag_prefix}-${syndesis_tag}"

  # Push release tag only
  git_push "$topdir" "$release_version"
}

drop_staging_repo() {
    local topdir="$1"
    local maven_opts="$2"

    echo "==== Dropping Sonatype staging repo"
    cd $topdir/app
    ./mvnw ${maven_opts} nexus-staging:drop -Prelease -DstagingDescription="Dropping repo"
}

# =======================================================================
# Helper

extract_maven_opts() {
    local maven_opts="-Dmaven.repo.local=$1 --batch-mode"

    local settings_xml=$(readopt --settings-xml --settings)
    if [ -n "${settings_xml}" ]; then
        maven_opts="$maven_opts -s $settings_xml"
    fi

    echo $maven_opts
}

git_commit() {
    local pattern="$1"
    local message="$2"

    local release_version=$(readopt --release-version)
    if [ ! $(hasflag --dry-run -n) ]; then
        git ls-files --modified | grep $pattern | xargs git commit -m "[$release_version]: $message"
    fi
}

calc_dev_version() {
    local release_version=$1
    local minor_version=$(extract_minor_version $release_version)
    check_error $minor_version
    echo "${minor_version}-SNAPSHOT"
}

extract_minor_version() {
    local version=$1
    local minor_version=$(echo $version | sed 's/^\([0-9]*\.[0-9]*\)\.[0-9]*\(-.*\)*$/\1/')
    if [ "$minor_version" = "$version" ]; then
        echo "ERROR: Cannot extract minor version from $version"
        return
    fi
    echo $minor_version
}
